LMM = lmer(Mean/StandardValues ~ ConditionOfInterest*StandardValues + (1 | ID),
data = Parameters)
summary(LMM)
summary(GLMM2_RandomInterceptsAndSlopes)
summary(ANOVA_SD)
GLMM_RandomIntercepts_Null = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
GLMM_RandomIntercepts_Null
GLMM_RandomIntercepts
summary(GLMM_RandomIntercepts)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
anova(GLMM_RandomIntercepts_JND,GLMM2_RandomInterceptsAndSlopes_JND)
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
require(brms)
require(rstan)
#require(lmerTest)
require(DHARMa)
set.seed(1)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
source("Utilities/PowerFunctions.r")
#optimize for fitting of Bayesian Linear Mixed Models (packages "rstan", "bmrs")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
#set.seed(9121)
ID = paste0("S0",1:5)
ConditionOfInterest = c(0,1)
StandardValues = c(5,6,7,8)
reps = 1:100
PSE_Difference = -0.1
JND_Difference = 0.25
Multiplicator_PSE_Standard = 0
Multiplicator_SD_Standard = 0.15
Type_ResponseFunction = "Normal"
SD_ResponseFunction = 0.1
Mean_Variability_Between = 0.1
SD_Variability_Between = 0.1
Psychometric = expand.grid(ID=ID, ConditionOfInterest=ConditionOfInterest, StandardValues=StandardValues, reps = reps)
Psychometric = Psychometric %>%
group_by(ID) %>%#
mutate(PSE_Factor_ID = rnorm(1,1,Mean_Variability_Between), #how much variability is in the means of the psychometric functions between subjects?
SD_Factor_ID = rnorm(1,1,SD_Variability_Between)) #how much variability is in the standard deviations of the psychometric functions between subjects?
Psychometric = Psychometric %>%
mutate(
Mean_Standard = StandardValues+StandardValues*Multiplicator_PSE_Standard,
SD_Standard = StandardValues*Multiplicator_SD_Standard,
Mean = (Mean_Standard + (ConditionOfInterest==1)*Mean_Standard*PSE_Difference),
SD = abs(SD_Standard + (ConditionOfInterest==1)*SD_Standard*JND_Difference))
Psychometric = Psychometric %>%
mutate(
Mean = Mean*PSE_Factor_ID,
SD = SD*SD_Factor_ID)
if (Type_ResponseFunction == "normal"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = pnorm(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
} else if (Type_ResponseFunction == "Cauchy"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
#} else if (Type_ResponseFunction == "uniform"){
#
#  Psychometric = Psychometric %>%
#  mutate(
#      staircase_factor = seq(SD_ResponseFunction[1],SD_ResponseFunction[2],(SD_ResponseFunction[2]-SD_ResponseFunc#tion[1]/6)))
} else{
print("distribution not valid")
}
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction),
Presented_TestStimulusStrength = Mean*staircase_factor,
Difference = Presented_TestStimulusStrength - StandardValues)
Psychometric = Psychometric %>%
mutate(
AnswerProbability = pnorm(Presented_TestStimulusStrength,Mean,SD),
##get binary answers ("Test was stronger" yes/no) from probabilities for each trial
Answer = as.numeric(rbernoulli(length(AnswerProbability),AnswerProbability))
)
###prepare for glmer() - needs sum of YES/Total per stimulus strength and condition
Psychometric = Psychometric %>%
filter(abs(staircase_factor-1) < 0.75) %>%
group_by(ID,ConditionOfInterest,StandardValues,Difference) %>%
mutate(Yes = sum(Answer==1),
Total = length(ConditionOfInterest))
PsychometricFunctions = quickpsy(Psychometric,Difference,Answer,grouping = .(ConditionOfInterest,ID,StandardValues), bootstrap = "none")
###########################################
####Parameter-As-Outcome Model (PAOM)######
###########################################
###Fitting psychometric functions and extracting means and standard deviations
Parameters = PsychometricFunctions$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters = Parameters2
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
LM = lm(Mean/StandardValues ~ ConditionOfInterest*StandardValues,
data = Parameters)
summary(LM)
LMM = lmer(Mean/StandardValues ~ ConditionOfInterest*StandardValues + (1 | ID),
data = Parameters)
summary(LMM)
Parameters$ConditionOfInterest[Parameters$ConditionOfInterest == 1] = "Condition of Interest"
Parameters$ConditionOfInterest[Parameters$ConditionOfInterest == 0] = "Baseline"
Plot_LMM_Mean = ggplot(Parameters,aes(StandardValues,Mean/StandardValues,color = ID)) +
geom_point(size = 4) +
facet_grid(.~ConditionOfInterest) +
scale_color_manual(name = "",
values = colorRampPalette(c(BlauUB,Yellow, Red))(5)) +
geom_smooth(method='lm', se = FALSE) +
xlab("Standard Values (m/s)") +
ylab("Normalized Mean (m/s)")
Plot_LM_Mean = ggplot(Parameters,aes(StandardValues,Mean/StandardValues)) +
geom_point(size = 4) +
facet_grid(.~ConditionOfInterest) +
geom_smooth(method='lm',color = "black", se = FALSE) +
xlab("Standard Values (m/s)") +
ylab("Normalized Mean (m/s)")
plot_grid(Plot_LM_Mean,Plot_LMM_Mean, labels = "AUTO")
ggsave("(Figure 4) Means.jpg", w = 12, h = 5)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
summary(GLMM_RandomIntercepts)
summary(GLMM2_RandomInterceptsAndSlopes)
GLMM_RandomIntercepts_Null_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
GLMM_RandomIntercepts_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM_RandomIntercepts_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
anova(GLMM_RandomIntercepts_JND,GLMM2_RandomInterceptsAndSlopes_JND)
anova(GLMM_RandomIntercepts_PSE,GLMM2_RandomInterceptsAndSlopes_PSE)
anova(GLMM_RandomIntercepts_JND,GLMM2_RandomInterceptsAndSlopes_JND)
anova(GLMM_RandomIntercepts_PSE,GLMM2_RandomInterceptsAndSlopes_PSE)
resid(GLMM_RandomIntercepts_JND)
plot(resid(GLMM_RandomIntercepts_JND))
qqplot(resid(GLMM_RandomIntercepts_JND))
?DHARMa
simulateResiduals(GLMM_RandomIntercepts_JND)
residuals.DHARMa(GLMM_RandomIntercepts_JND)
require(DHARMa)
residuals.DHARMa(GLMM_RandomIntercepts_JND)
require(DHARMa)
testResiduals(GLMM_RandomIntercepts_JND)
testResiduals(GLMM2_RandomInterceptsAndSlopes)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes)
plot(residuals.glm(GLMM2_RandomInterceptsAndSlopes))
plot(resid(GLMM2_RandomInterceptsAndSlopes))
Hello = (resid(GLMM2_RandomInterceptsAndSlopes))
Hello
ggplot(data.frame(residuals(GLMM2_RandomInterceptsAndSlopes)),aes(residuals.GLMM2_RandomInterceptsAndSlopes.)) +
geom_density()
install.packages("DHARMa")
require(DHARMa)
DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes)
DHARMa::plotResiduals(GLMM2_RandomInterceptsAndSlopes)
?plotResiduals
DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes)
testData = createData(sampleSize = 200, family = poisson(),
randomEffectVariance = 1, numGroups = 5)
fittedModel <- glm(observedResponse ~ Environment1,
family = "poisson", data = testData)
simulationOutput <- simulateResiduals(fittedModel = fittedModel)
simulationOutput
testData = createData(sampleSize = 250)
fittedModel <- glmer(observedResponse ~ Environment1 + (1|group) , family = "poisson", data = testData)
fittedModel
testDispersion(fittedModel)
testDispersion(GLMM2_RandomInterceptsAndSlopes)
simulationOutput <- simulateResiduals(fittedModel = fittedModel, plot = T)
simulationOutput <- simulateResiduals(fittedModel = GLMM2_RandomInterceptsAndSlopes, plot = T)
summary(GLMM2_RandomInterceptsAndSlopes)
DHARMa::getSimulations(LMM)
DHARMa::plotResiduals(LMM)
simulateResiduals(LMM)
GLMM2_RandomInterceptsAndSlopes_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (Difference| ID),
family = binomial(link = "logit"),
data = Psychometric)
DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes_Null_PSE)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes_Null_PSE)
GLMM2_RandomInterceptsAndSlopes_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes_Null_PSE)
simulateResiduals(GLMM_RandomIntercepts_JND)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND)
GLMM2_RandomInterceptsAndSlopes_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (Difference| ID),
family = binomial(link = "logit"),
data = Psychometric)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND)
simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND)
plot(simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND))
DHARMa::plotResiduals(simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND))
Residuals = simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND)
plot(Residuals)
plot(Residuals)
Residuals2 = simulateResiduals(GLMM_RandomIntercepts_JND)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "logit"),
data = Psychometric)
Residuals2 = simulateResiduals(GLMM_RandomIntercepts_JND)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "logit"),
data = Psychometric)
Residuals2 = simulateResiduals(GLMM_RandomIntercepts_JND)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
Residuals2 = simulateResiduals(GLMM_RandomIntercepts_JND)
GLMM2_RandomInterceptsAndSlopes_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
Residuals = simulateResiduals(GLMM2_RandomInterceptsAndSlopes_JND)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "logit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (Difference| ID),
family = binomial(link = "logit"),
data = Psychometric)
Residuals2 = simulateResiduals(GLMM_RandomIntercepts_JND)
Residuals = simulateResiduals(GLMM_RandomIntercepts_PSE)
GLMM_RandomIntercepts_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "logit"),
data = Psychometric)
Residuals = simulateResiduals(GLMM_RandomIntercepts_PSE)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
summary(GLMM_RandomIntercepts)
summary(GLMM2_RandomInterceptsAndSlopes)
GLMM_RandomIntercepts_Null_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
GLMM_RandomIntercepts_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM_RandomIntercepts_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
anova(GLMM_RandomIntercepts_JND,GLMM2_RandomInterceptsAndSlopes_JND)
anova(GLMM_RandomIntercepts_PSE,GLMM2_RandomInterceptsAndSlopes_PSE)
DHARMa::plotQQunif(GLMM_RandomIntercepts_JND)
qqnorm(GLMM2_RandomInterceptsAndSlopes, ~ranef(., level=2))
qqnorm(GLMM2_RandomInterceptsAndSlopes, ~ranef(., level=1))
qqnorm(GLMM2_RandomInterceptsAndSlopes)
qqnorm(resid(GLMM2_RandomInterceptsAndSlopes, ~ranef(., level=2)))
qqnorm(resid(GLMM2_RandomInterceptsAndSlopes))
plot(resid(GLMM2_RandomInterceptsAndSlopes))
ggplot(data.frame(residuals(GLMM2_RandomInterceptsAndSlopes)),aes(residuals.GLMM2_RandomInterceptsAndSlopes.)) +
geom_density()
summary(GLMM2_RandomInterceptsAndSlopes)
install.packages("GLMMmisc")
require(GLMMmisc)
sim.residplot(GLMM2_RandomInterceptsAndSlopes, add.sim.resid = TRUE)
require(GLMMmisc)
install.packages("remotes")
remotes::install_github("pcdjohnson/GLMMmisc")
sim.residplot(GLMM2_RandomInterceptsAndSlopes, add.sim.resid = TRUE)
require(GLMMmisc)
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
require(brms)
require(rstan)
#require(lmerTest)
require(DHARMa)
set.seed(1)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
source("Utilities/PowerFunctions.r")
#optimize for fitting of Bayesian Linear Mixed Models (packages "rstan", "bmrs")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
#set.seed(9121)
ID = paste0("S0",1:5)
ConditionOfInterest = c(0,1)
StandardValues = c(5,6,7,8)
reps = 1:100
PSE_Difference = -0.1
JND_Difference = 0.25
Multiplicator_PSE_Standard = 0
Multiplicator_SD_Standard = 0.15
Type_ResponseFunction = "Normal"
SD_ResponseFunction = 0.1
Mean_Variability_Between = 0.1
SD_Variability_Between = 0.1
Psychometric = expand.grid(ID=ID, ConditionOfInterest=ConditionOfInterest, StandardValues=StandardValues, reps = reps)
Psychometric = Psychometric %>%
group_by(ID) %>%#
mutate(PSE_Factor_ID = rnorm(1,1,Mean_Variability_Between), #how much variability is in the means of the psychometric functions between subjects?
SD_Factor_ID = rnorm(1,1,SD_Variability_Between)) #how much variability is in the standard deviations of the psychometric functions between subjects?
Psychometric = Psychometric %>%
mutate(
Mean_Standard = StandardValues+StandardValues*Multiplicator_PSE_Standard,
SD_Standard = StandardValues*Multiplicator_SD_Standard,
Mean = (Mean_Standard + (ConditionOfInterest==1)*Mean_Standard*PSE_Difference),
SD = abs(SD_Standard + (ConditionOfInterest==1)*SD_Standard*JND_Difference))
Psychometric = Psychometric %>%
mutate(
Mean = Mean*PSE_Factor_ID,
SD = SD*SD_Factor_ID)
if (Type_ResponseFunction == "normal"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = pnorm(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
} else if (Type_ResponseFunction == "Cauchy"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
#} else if (Type_ResponseFunction == "uniform"){
#
#  Psychometric = Psychometric %>%
#  mutate(
#      staircase_factor = seq(SD_ResponseFunction[1],SD_ResponseFunction[2],(SD_ResponseFunction[2]-SD_ResponseFunc#tion[1]/6)))
} else{
print("distribution not valid")
}
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction),
Presented_TestStimulusStrength = Mean*staircase_factor,
Difference = Presented_TestStimulusStrength - StandardValues)
Psychometric = Psychometric %>%
mutate(
AnswerProbability = pnorm(Presented_TestStimulusStrength,Mean,SD),
##get binary answers ("Test was stronger" yes/no) from probabilities for each trial
Answer = as.numeric(rbernoulli(length(AnswerProbability),AnswerProbability))
)
###prepare for glmer() - needs sum of YES/Total per stimulus strength and condition
Psychometric = Psychometric %>%
filter(abs(staircase_factor-1) < 0.75) %>%
group_by(ID,ConditionOfInterest,StandardValues,Difference) %>%
mutate(Yes = sum(Answer==1),
Total = length(ConditionOfInterest))
PsychometricFunctions = quickpsy(Psychometric,Difference,Answer,grouping = .(ConditionOfInterest,ID,StandardValues), bootstrap = "none")
###########################################
####Parameter-As-Outcome Model (PAOM)######
###########################################
###Fitting psychometric functions and extracting means and standard deviations
Parameters = PsychometricFunctions$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters = Parameters2
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
LM = lm(Mean/StandardValues ~ ConditionOfInterest*StandardValues,
data = Parameters)
summary(LM)
LMM = lmer(Mean/StandardValues ~ ConditionOfInterest*StandardValues + (1 | ID),
data = Parameters)
summary(LMM)
Parameters$ConditionOfInterest[Parameters$ConditionOfInterest == 1] = "Condition of Interest"
Parameters$ConditionOfInterest[Parameters$ConditionOfInterest == 0] = "Baseline"
Plot_LMM_Mean = ggplot(Parameters,aes(StandardValues,Mean/StandardValues,color = ID)) +
geom_point(size = 4) +
facet_grid(.~ConditionOfInterest) +
scale_color_manual(name = "",
values = colorRampPalette(c(BlauUB,Yellow, Red))(5)) +
geom_smooth(method='lm', se = FALSE) +
xlab("Standard Values (m/s)") +
ylab("Normalized Mean (m/s)")
Plot_LM_Mean = ggplot(Parameters,aes(StandardValues,Mean/StandardValues)) +
geom_point(size = 4) +
facet_grid(.~ConditionOfInterest) +
geom_smooth(method='lm',color = "black", se = FALSE) +
xlab("Standard Values (m/s)") +
ylab("Normalized Mean (m/s)")
plot_grid(Plot_LM_Mean,Plot_LMM_Mean, labels = "AUTO")
ggsave("(Figure 4) Means.jpg", w = 12, h = 5)
GLMM_RandomIntercepts_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
summary(GLMM_RandomIntercepts)
summary(GLMM2_RandomInterceptsAndSlopes)
GLMM_RandomIntercepts_Null_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null_JND = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
GLMM_RandomIntercepts_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_PSE = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM_RandomIntercepts_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (1| ID),
family = binomial(link = "probit"),
data = Psychometric)
GLMM2_RandomInterceptsAndSlopes_Null_PSE = glmer(cbind(Yes, Total - Yes) ~ Difference + (Difference| ID),
family = binomial(link = "probit"),
data = Psychometric)
anova(GLMM_RandomIntercepts,GLMM_RandomIntercepts_Null)
anova(GLMM2_RandomInterceptsAndSlopes,GLMM2_RandomInterceptsAndSlopes_Null)
DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes)
DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes_Null)
DHARMa::getSimulations(GLMM_RandomIntercepts)
plot(DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes))
GLMM2_RandomInterceptsAndSlopes
Sim = DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes)
Sim
residuals(Sim)
Sim = DHARMa::getSimulations(GLMM2_RandomInterceptsAndSlopes)
residuals(Sim)
plot.DHARMa(Sim)
plot(Sim)
plotQQunif(Sim)
Sim = getSimulations(GLMM2_RandomInterceptsAndSlopes)
Sim
plotQQunif(Sim)
Sim = simulateResiduals(GLMM2_RandomInterceptsAndSlopes)
devtools::install_github("goodekat/ggResidpanel")
