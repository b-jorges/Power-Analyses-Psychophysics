Difference = Presented_TestStimulusStrength - StandardValues,
AnswerProbability = pnorm(Presented_TestStimulusStrength,Mean,SD),
Answer = as.numeric(rbernoulli(length(AnswerProbability),AnswerProbability))
)
Psychometric = Psychometric %>%
filter(abs(staircase_factor-1) < 0.5) %>%
group_by(ID,ConditionOfInterest,StandardValues,Difference) %>%
mutate(Yes = sum(Answer==1),
Total = length(ConditionOfInterest))
Psychometric
}
Analyze_Pychometric_Accuracy_GLMM = function(Psychometric){
TimeBeginning = Sys.time()
GLMM_Accuracy = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest + (Difference  | ID)  + (Difference  | StandardValues),
family = binomial(link = "probit"),
data = Psychometric,
nAGQ = 0,
control = glmerControl(optimizer = "nloptwrap"))
p = summary(GLMM_Accuracy)$coefficients[8]
#print(TimeBeginning - Sys.time()) ###This is two show how long each iteration takes
#print(p)
p
}
Analyze_Pychometric_Precision_GLMM = function(Psychometric){
TimeBeginning = Sys.time()
GLMM_Precision = glmer(cbind(Yes, Total - Yes) ~ as.factor(ConditionOfInterest)*Difference + (Difference  | ID) + (Difference  | StandardValues),
family = binomial(link = "probit"),
data = Psychometric,
nAGQ = 0,
control = glmerControl(optimizer = "nloptwrap"))
p = summary(GLMM_Precision)$coefficients[16]
#print(p)
p
}
####################################################################################
##################Comparing Two-Level approach and GLMMs############################
####################################################################################
Parameters = quickpsy(Psychometric,Difference,Answer,grouping = .(ID,ConditionOfInterest,StandardValues), bootstrap = "none")$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters2)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues*ID,Parameters2)
summary(ANOVA_SD)
GetParametersOfPsychometricFunction = function(Psychometric){
Parameters = quickpsy(Psychometric,Difference,Answer,grouping = .(ID,ConditionOfInterest,StandardValues), bootstrap = "none")$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters2
}
Analyze_Pychometric_Accuracy_2Level = function(Parameters){
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
Coefficients = summary(ANOVA_Mean)[[1]]
Coefficients$`Pr(>F)`[1]
}
Analyze_Pychometric_Precision_2Level = function(Parameters){
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
Coefficients = summary(ANOVA_SD)[[1]]
Coefficients$`Pr(>F)`[1]
}
Power = data.frame()
nIterations = 50
pvalue = 0.05
NumbersOfSubjects = c(10,12,14,16,18,20)
Mean_Variability_Between = 0.1
SD_Variability_Between = 0.1
ComparePowers = function(ConditionOfInterest,StandardValues,reps,PSE_Difference,JND_Difference,
PSE_Standard,SD_Standard,SD_ResponseFunction,Mean_Variability_Between,SD_Variability_Between,
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference, Mean_Standard,
SD_Standard, SD_ResponseFunction,Mean_Variability_Between,SD_Variability_Between)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
Powers1 = ComparePowers(ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between, SD_Variability_Between, NumbersOfSubjects)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues*ID,Parameters2)
####################################################################################
##################Comparing Two-Level approach and GLMMs############################
####################################################################################
Parameters = quickpsy(Psychometric,Difference,Answer,grouping = .(ID,ConditionOfInterest,StandardValues), bootstrap = "none")$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters2)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues*ID,Parameters2)
summary(ANOVA_SD)
GetParametersOfPsychometricFunction = function(Psychometric){
Parameters = quickpsy(Psychometric,Difference,Answer,grouping = .(ID,ConditionOfInterest,StandardValues), bootstrap = "none")$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters2
}
Analyze_Pychometric_Accuracy_2Level = function(Parameters){
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
Coefficients = summary(ANOVA_Mean)[[1]]
Coefficients$`Pr(>F)`[1]
}
Analyze_Pychometric_Precision_2Level = function(Parameters){
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
Coefficients = summary(ANOVA_SD)[[1]]
Coefficients$`Pr(>F)`[1]
}
Power = data.frame()
nIterations = 50
pvalue = 0.05
NumbersOfSubjects = c(10,12,14,16,18,20)
Mean_Variability_Between = 0.1
SD_Variability_Between = 0.1
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
p
Powers1 = ComparePowers(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects)
ComparePowers = function(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
Powers1 = ComparePowers(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects)
ComparePowers = function(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
Powers1 = ComparePowers(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects)
ComparePowers = function(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
NumbersOfSubjects = c(10,12,14,16,18,20)
Mean_Variability_Between = 0.1
SD_Variability_Between = 0.1
ComparePowers = function(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
)
))
ComparePowers = function(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
Powers1 = ComparePowers(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects)
ComparePowers = function(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
Powers1 = ComparePowers(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects)
PSE_Difference
JND_Difference
nIterations = 200
Powers1 = ComparePowers(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference=0.1, JND_Difference=0.1,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects)
write.csv(Powers1,"Powers1.csv")
Powers3 = ComparePowers(ConditionOfInterest, StandardValues = c(2,4), reps, PSE_Difference = 0, JND_Difference = 0.3,
PSE_Standard = 0.1, SD_Standard, SD_ResponseFunction, Mean_Variability_Between, SD_Variability_Between, NumbersOfSubjects)
write.csv(Powers3,"Powers3.csv")
ComparePowers = function(ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1,
NumbersOfSubjects){
for (i in NumbersOfSubjects){
ID = paste0("s",1:i)
TimeBeginning = Sys.time()
Dataframe_Temp = c()
for (j in 1:nIterations){
Dataframe = SimulatePsychometricFunction_Staircase(ID, ConditionOfInterest, StandardValues, reps, PSE_Difference, JND_Difference,
PSE_Standard, SD_Standard, SD_ResponseFunction, Mean_Variability_Between = 0.1, SD_Variability_Between = 0.1)
Parameters = GetParametersOfPsychometricFunction(Dataframe)
p = c(Analyze_Pychometric_Accuracy_GLMM(Dataframe),
Analyze_Pychometric_Precision_GLMM(Dataframe),
Analyze_Pychometric_Accuracy_2Level(Parameters),
Analyze_Pychometric_Precision_2Level(Parameters))
Dataframe_Temp = rbind(Dataframe_Temp,p)
if ((j/25) %in% 1:40){
(print(j))
}
}
Power = rbind(Power,
data.frame(value = c(mean(Dataframe_Temp[,1] < pvalue),
mean(Dataframe_Temp[,2] < pvalue),
mean(Dataframe_Temp[,3] < pvalue),
mean(Dataframe_Temp[,4] < pvalue)),
label = c("Accuracy GLMM",
"Precision GLMM",
"Accuracy Two-Level",
"Precision Two-Level"),
nSubjects = i))
print(paste0("This iteration has taken ", Sys.time() - TimeBeginning))  ###This is two show how long each iteration takes
print(paste0("Accuracy GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,1] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision GLMM for ", i, " subjects: ", mean(Dataframe_Temp[,2] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Accuracy 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,3] < pvalue))) #outputs an estimate of the power for each n
print(paste0("Precision 2Level for ", i, " subjects: ", mean(Dataframe_Temp[,4] < pvalue))) #outputs an estimate of the power for each n
}
Power
}
Powers3 = ComparePowers(ConditionOfInterest, StandardValues = c(2,4), reps, PSE_Difference = 0, JND_Difference = 0.3,
PSE_Standard = 0.1, SD_Standard, SD_ResponseFunction, Mean_Variability_Between, SD_Variability_Between, NumbersOfSubjects)
StandardValues = c(2,4)
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
set.seed(9121)
ID = paste0("s",1:5)
ConditionOfInterest = c(0,1)
StandardValues = c(2,4)
reps = seq(1,55,1)
PSE_Difference = -0.3
JND_Difference = -0.2
PSE_Standard = 0
Multiplicator_SD_Standard = 0.108
SD_Standard = StandardValues*Multiplicator_SD_Standard
Type_ResponseFunction = "Normal"
SD_ResponseFunction = 0.04
Mean_Variability_Between = 0.1
SD_Variability_Between = 0.1
Psychometric = expand.grid(ID=ID, ConditionOfInterest=ConditionOfInterest, StandardValues=StandardValues, reps = reps)
Psychometric = Psychometric %>%
group_by(ID) %>%#
mutate(PSE_Factor_ID = rnorm(1,1,Mean_Variability_Between), #how much variability is in the means of the psychometric functions between subjects?
SD_Factor_ID = rnorm(1,1,SD_Variability_Between)) #how much variability is in the standard deviations of the psychometric functions between subjects?
Psychometric = Psychometric %>%
mutate(
Mean_Standard = StandardValues+StandardValues*PSE_Standard,
Mean = (Mean_Standard + (ConditionOfInterest==1)*Mean_Standard*PSE_Difference),
SD = abs(SD_Standard + (ConditionOfInterest==1)*SD_Standard*JND_Difference))
Psychometric = Psychometric %>%
mutate(
Mean = Mean*PSE_Factor_ID,
SD = SD*SD_Factor_ID)
ResponseDistributions = data.frame(
Value=c(rcauchy(1650,1,0.05),
rnorm(1650,1,0.1),
rep(c(0.7,0.85,1,1.15,1.3),1650/5)),
label = c(rep("Cauchy",1650),
rep("Normal",1650),
rep("Uniform",1650))
) %>% filter(abs(Value-1) < 0.5)
