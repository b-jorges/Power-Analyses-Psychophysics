Beginning = Sys.time()
Dataframe1 = SimulatePsychometricData(nParticipants,
ConditionOfInterest,
StandardValues,
reps,
PSE_Difference,
JND_Difference,
Multiplicator_PSE_Standard,
Multiplicator_SD_Standard,
Type_ResponseFunction,
SD_ResponseFunction,
Mean_Variability_Between,
SD_Variability_Between)
Model1 = glm(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference,
family = binomial(link = "probit"),
data = Dataframe1,
)
Dataframe1$Prediction_Model1 = predict(Model1, type = "response", newdata = Dataframe1)
Model2 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1| ID),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model2 = predict(Model2, type = "response", newdata = Dataframe1)
Model3 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference| ID),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model3 = predict(Model3, type = "response", newdata = Dataframe1)
Model4 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + ConditionOfInterest| ID),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model4 = predict(Model4, type = "response", newdata = Dataframe1)
Model5 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference + ConditionOfInterest| ID),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model5 = predict(Model5, type = "response", newdata = Dataframe1)
Model6 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model6 = predict(Model6, type = "response", newdata = Dataframe1)
Model7 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1| ID) +
(1|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model7 = predict(Model7, type = "response", newdata = Dataframe1)
Model8 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference| ID) +
(1|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model8 = predict(Model8, type = "response", newdata = Dataframe1)
Model9 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + ConditionOfInterest| ID) +
(1|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model9 = predict(Model9, type = "response", newdata = Dataframe1)
Model10 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference + ConditionOfInterest| ID) +
(1|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model10 = predict(Model10, type = "response", newdata = Dataframe1)
Model11 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference |StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model11 = predict(Model11, type = "response", newdata = Dataframe1)
Model12 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1| ID) +
(1 + Difference |StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model12 = predict(Model12, type = "response", newdata = Dataframe1)
Model13 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference| ID) +
(1 + Difference |StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model13 = predict(Model13, type = "response", newdata = Dataframe1)
Model14 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + ConditionOfInterest| ID) +
(1 + Difference |StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model14 = predict(Model14, type = "response", newdata = Dataframe1)
Model15 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference + ConditionOfInterest| ID) +
(1 + Difference |StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model15 = predict(Model15, type = "response", newdata = Dataframe1)
Model16 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model16 = predict(Model16, type = "response", newdata = Dataframe1)
Model17 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1| ID) +
(1 + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model17 = predict(Model17, type = "response", newdata = Dataframe1)
Model18 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference| ID) +
(1 + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model18 = predict(Model18, type = "response", newdata = Dataframe1)
Model19 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + ConditionOfInterest| ID) +
(1 + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model19 = predict(Model19, type = "response", newdata = Dataframe1)
Model20 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference + ConditionOfInterest| ID) +
(1 + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model20 = predict(Model20, type = "response", newdata = Dataframe1)
Model21 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model21 = predict(Model21, type = "response", newdata = Dataframe1)
ranef(Model21)
Model22 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1| ID) +
(1 + Difference + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model22 = predict(Model22, type = "response", newdata = Dataframe1)
Model23 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference| ID) +
(1 + Difference + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model23 = predict(Model23, type = "response", newdata = Dataframe1)
Model24 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + ConditionOfInterest| ID) +
(1 + Difference + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model24 = predict(Model24, type = "response", newdata = Dataframe1)
Model25 = glmer(cbind(Yes, Total - Yes) ~ ConditionOfInterest*Difference +
(1 + Difference + ConditionOfInterest| ID) +
(1 + Difference + ConditionOfInterest|StandardValues),
family = binomial(link = "probit"),
data = Dataframe1,
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
Dataframe1$Prediction_Model25 = predict(Model25, type = "response", newdata = Dataframe1)
Dataframe1$AIC1 = Model1$aic
Dataframe1$AIC2 = summary(Model2)$AICtab[1]
Dataframe1$AIC3 = summary(Model3)$AICtab[1]
Dataframe1$AIC4 = summary(Model4)$AICtab[1]
Dataframe1$AIC5 = summary(Model5)$AICtab[1]
Dataframe1$AIC6 = summary(Model6)$AICtab[1]
Dataframe1$AIC7 = summary(Model7)$AICtab[1]
Dataframe1$AIC8 = summary(Model8)$AICtab[1]
Dataframe1$AIC9 = summary(Model9)$AICtab[1]
Dataframe1$AIC10 = summary(Model10)$AICtab[1]
Dataframe1$AIC11 = summary(Model11)$AICtab[1]
Dataframe1$AIC12 = summary(Model12)$AICtab[1]
Dataframe1$AIC13 = summary(Model13)$AICtab[1]
Dataframe1$AIC14 = summary(Model14)$AICtab[1]
Dataframe1$AIC15 = summary(Model15)$AICtab[1]
Dataframe1$AIC16 = summary(Model16)$AICtab[1]
Dataframe1$AIC17 = summary(Model17)$AICtab[1]
Dataframe1$AIC18 = summary(Model18)$AICtab[1]
Dataframe1$AIC19 = summary(Model19)$AICtab[1]
Dataframe1$AIC20 = summary(Model20)$AICtab[1]
Dataframe1$AIC21 = summary(Model21)$AICtab[1]
Dataframe1$AIC22 = summary(Model22)$AICtab[1]
Dataframe1$AIC23 = summary(Model23)$AICtab[1]
Dataframe1$AIC24 = summary(Model24)$AICtab[1]
Dataframe1$AIC25 = summary(Model25)$AICtab[1]
Dataframe1$CoefCond1 =   summary(Model1)$coefficients[6]
Dataframe1$CoefCond2 = summary(Model2)$coefficients[6]
Dataframe1$CoefCond3 = summary(Model3)$coefficients[6]
Dataframe1$CoefCond4 = summary(Model4)$coefficients[6]
Dataframe1$CoefCond5 = summary(Model5)$coefficients[6]
Dataframe1$CoefCond6 = summary(Model6)$coefficients[6]
Dataframe1$CoefCond7 = summary(Model7)$coefficients[6]
Dataframe1$CoefCond8 = summary(Model8)$coefficients[6]
Dataframe1$CoefCond9 = summary(Model9)$coefficients[6]
Dataframe1$CoefCond10 = summary(Model10)$coefficients[6]
Dataframe1$CoefCond11 = summary(Model11)$coefficients[6]
Dataframe1$CoefCond12 = summary(Model12)$coefficients[6]
Dataframe1$CoefCond13 = summary(Model13)$coefficients[6]
Dataframe1$CoefCond14 = summary(Model14)$coefficients[6]
Dataframe1$CoefCond15 = summary(Model15)$coefficients[6]
Dataframe1$CoefCond16 = summary(Model16)$coefficients[6]
Dataframe1$CoefCond17 = summary(Model17)$coefficients[6]
Dataframe1$CoefCond18 = summary(Model18)$coefficients[6]
Dataframe1$CoefCond19 = summary(Model19)$coefficients[6]
Dataframe1$CoefCond20 = summary(Model20)$coefficients[6]
Dataframe1$CoefCond21 = summary(Model21)$coefficients[6]
Dataframe1$CoefCond22 = summary(Model22)$coefficients[6]
Dataframe1$CoefCond23 = summary(Model23)$coefficients[6]
Dataframe1$CoefCond24 = summary(Model24)$coefficients[6]
Dataframe1$CoefCond25 = summary(Model25)$coefficients[6]
Dataframe1$CoefInteraction1 =   summary(Model1)$coefficients[8]
Dataframe1$CoefInteraction2 = summary(Model2)$coefficients[8]
Dataframe1$CoefInteraction3 = summary(Model3)$coefficients[8]
Dataframe1$CoefInteraction4 = summary(Model4)$coefficients[8]
Dataframe1$CoefInteraction5 = summary(Model5)$coefficients[8]
Dataframe1$CoefInteraction6 = summary(Model6)$coefficients[8]
Dataframe1$CoefInteraction7 = summary(Model7)$coefficients[8]
Dataframe1$CoefInteraction8 = summary(Model8)$coefficients[8]
Dataframe1$CoefInteraction9 = summary(Model9)$coefficients[8]
Dataframe1$CoefInteraction10 = summary(Model10)$coefficients[8]
Dataframe1$CoefInteraction11 = summary(Model11)$coefficients[8]
Dataframe1$CoefInteraction12 = summary(Model12)$coefficients[8]
Dataframe1$CoefInteraction13 = summary(Model13)$coefficients[8]
Dataframe1$CoefInteraction14 = summary(Model14)$coefficients[8]
Dataframe1$CoefInteraction15 = summary(Model15)$coefficients[8]
Dataframe1$CoefInteraction16 = summary(Model16)$coefficients[8]
Dataframe1$CoefInteraction17 = summary(Model17)$coefficients[8]
Dataframe1$CoefInteraction18 = summary(Model18)$coefficients[8]
Dataframe1$CoefInteraction19 = summary(Model19)$coefficients[8]
Dataframe1$CoefInteraction20 = summary(Model20)$coefficients[8]
Dataframe1$CoefInteraction21 = summary(Model21)$coefficients[8]
Dataframe1$CoefInteraction22 = summary(Model22)$coefficients[8]
Dataframe1$CoefInteraction23 = summary(Model23)$coefficients[8]
Dataframe1$CoefInteraction24 = summary(Model24)$coefficients[8]
Dataframe1$CoefInteraction25 = summary(Model25)$coefficients[8]
Dataframe1$PvaluesCoI1 =   summary(Model1)$coefficients[14]
Dataframe1$PvaluesCoI2 = summary(Model2)$coefficients[14]
Dataframe1$PvaluesCoI3 = summary(Model3)$coefficients[14]
Dataframe1$PvaluesCoI4 = summary(Model4)$coefficients[14]
Dataframe1$PvaluesCoI5 = summary(Model5)$coefficients[14]
Dataframe1$PvaluesCoI6 = summary(Model6)$coefficients[14]
Dataframe1$PvaluesCoI7 = summary(Model7)$coefficients[14]
Dataframe1$PvaluesCoI8 = summary(Model8)$coefficients[14]
Dataframe1$PvaluesCoI9 = summary(Model9)$coefficients[14]
Dataframe1$PvaluesCoI10 = summary(Model10)$coefficients[14]
Dataframe1$PvaluesCoI11 = summary(Model11)$coefficients[14]
Dataframe1$PvaluesCoI12 = summary(Model12)$coefficients[14]
Dataframe1$PvaluesCoI13 = summary(Model13)$coefficients[14]
Dataframe1$PvaluesCoI14 = summary(Model14)$coefficients[14]
Dataframe1$PvaluesCoI15 = summary(Model15)$coefficients[14]
Dataframe1$PvaluesCoI16 = summary(Model16)$coefficients[14]
Dataframe1$PvaluesCoI17 = summary(Model17)$coefficients[14]
Dataframe1$PvaluesCoI18 = summary(Model18)$coefficients[14]
Dataframe1$PvaluesCoI19 = summary(Model19)$coefficients[14]
Dataframe1$PvaluesCoI20 = summary(Model20)$coefficients[14]
Dataframe1$PvaluesCoI21 = summary(Model21)$coefficients[14]
Dataframe1$PvaluesCoI22 = summary(Model22)$coefficients[14]
Dataframe1$PvaluesCoI23 = summary(Model23)$coefficients[14]
Dataframe1$PvaluesCoI24 = summary(Model24)$coefficients[14]
Dataframe1$PvaluesCoI25 = summary(Model25)$coefficients[14]
Dataframe1$PvaluesInterac1 =   summary(Model1)$coefficients[16]
Dataframe1$PvaluesInterac2 = summary(Model2)$coefficients[16]
Dataframe1$PvaluesInterac3 = summary(Model3)$coefficients[16]
Dataframe1$PvaluesInterac4 = summary(Model4)$coefficients[16]
Dataframe1$PvaluesInterac5 = summary(Model5)$coefficients[16]
Dataframe1$PvaluesInterac6 = summary(Model6)$coefficients[16]
Dataframe1$PvaluesInterac7 = summary(Model7)$coefficients[16]
Dataframe1$PvaluesInterac8 = summary(Model8)$coefficients[16]
Dataframe1$PvaluesInterac9 = summary(Model9)$coefficients[16]
Dataframe1$PvaluesInterac10 = summary(Model10)$coefficients[16]
Dataframe1$PvaluesInterac11 = summary(Model11)$coefficients[16]
Dataframe1$PvaluesInterac12 = summary(Model12)$coefficients[16]
Dataframe1$PvaluesInterac13 = summary(Model13)$coefficients[16]
Dataframe1$PvaluesInterac14 = summary(Model14)$coefficients[16]
Dataframe1$PvaluesInterac15 = summary(Model15)$coefficients[16]
Dataframe1$PvaluesInterac16 = summary(Model16)$coefficients[16]
Dataframe1$PvaluesInterac17 = summary(Model17)$coefficients[16]
Dataframe1$PvaluesInterac18 = summary(Model18)$coefficients[16]
Dataframe1$PvaluesInterac19 = summary(Model19)$coefficients[16]
Dataframe1$PvaluesInterac20 = summary(Model20)$coefficients[16]
Dataframe1$PvaluesInterac21 = summary(Model21)$coefficients[16]
Dataframe1$PvaluesInterac22 = summary(Model22)$coefficients[16]
Dataframe1$PvaluesInterac23 = summary(Model23)$coefficients[16]
Dataframe1$PvaluesInterac24 = summary(Model24)$coefficients[16]
Dataframe1$PvaluesInterac25 = summary(Model25)$coefficients[16]
Dataframe1 = Dataframe1 %>%
group_by(ConditionOfInterest,ID,StandardValues) %>%
mutate(Mean_Model1 = Difference[which.min(abs(Prediction_Model1-0.5))],
Mean_Model2 = Difference[which.min(abs(Prediction_Model2-0.5))],
Mean_Model3 = Difference[which.min(abs(Prediction_Model3-0.5))],
Mean_Model4 = Difference[which.min(abs(Prediction_Model4-0.5))],
Mean_Model5 = Difference[which.min(abs(Prediction_Model5-0.5))],
Mean_Model6 = Difference[which.min(abs(Prediction_Model6-0.5))],
Mean_Model7 = Difference[which.min(abs(Prediction_Model7-0.5))],
Mean_Model8 = Difference[which.min(abs(Prediction_Model8-0.5))],
Mean_Model9 = Difference[which.min(abs(Prediction_Model9-0.5))],
Mean_Model10 = Difference[which.min(abs(Prediction_Model10-0.5))],
Mean_Model11 = Difference[which.min(abs(Prediction_Model11-0.5))],
Mean_Model12 = Difference[which.min(abs(Prediction_Model12-0.5))],
Mean_Model13 = Difference[which.min(abs(Prediction_Model13-0.5))],
Mean_Model14 = Difference[which.min(abs(Prediction_Model14-0.5))],
Mean_Model15 = Difference[which.min(abs(Prediction_Model15-0.5))],
Mean_Model16 = Difference[which.min(abs(Prediction_Model16-0.5))],
Mean_Model17 = Difference[which.min(abs(Prediction_Model17-0.5))],
Mean_Model18 = Difference[which.min(abs(Prediction_Model18-0.5))],
Mean_Model19 = Difference[which.min(abs(Prediction_Model19-0.5))],
Mean_Model20 = Difference[which.min(abs(Prediction_Model20-0.5))],
Mean_Model21 = Difference[which.min(abs(Prediction_Model21-0.5))],
Mean_Model22 = Difference[which.min(abs(Prediction_Model22-0.5))],
Mean_Model23 = Difference[which.min(abs(Prediction_Model23-0.5))],
Mean_Model24 = Difference[which.min(abs(Prediction_Model24-0.5))],
Mean_Model25 = Difference[which.min(abs(Prediction_Model25-0.5))])
Dataframe1 = Dataframe1 %>%
group_by(ConditionOfInterest,ID,StandardValues) %>%
mutate(SD_Model1 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model1,Difference = Difference,Prediction = Prediction_Model1)$minimum,
SD_Model2 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model2,Difference = Difference,Prediction = Prediction_Model2)$minimum,
SD_Model3 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model3,Difference = Difference,Prediction = Prediction_Model3)$minimum,
SD_Model4 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model4,Difference = Difference,Prediction = Prediction_Model4)$minimum,
SD_Model5 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model5,Difference = Difference,Prediction = Prediction_Model5)$minimum,
SD_Model6 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model6,Difference = Difference,Prediction = Prediction_Model6)$minimum,
SD_Model7 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model7,Difference = Difference,Prediction = Prediction_Model7)$minimum,
SD_Model8 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model8,Difference = Difference,Prediction = Prediction_Model8)$minimum,
SD_Model9 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model9,Difference = Difference,Prediction = Prediction_Model9)$minimum,
SD_Model10 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model10,Difference = Difference,Prediction = Prediction_Model10)$minimum,
SD_Model11 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model11,Difference = Difference,Prediction = Prediction_Model11)$minimum,
SD_Model12 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model12,Difference = Difference,Prediction = Prediction_Model12)$minimum,
SD_Model13 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model13,Difference = Difference,Prediction = Prediction_Model13)$minimum,
SD_Model14 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model14,Difference = Difference,Prediction = Prediction_Model14)$minimum,
SD_Model15 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model15,Difference = Difference,Prediction = Prediction_Model15)$minimum,
SD_Model16 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model16,Difference = Difference,Prediction = Prediction_Model16)$minimum,
SD_Model17 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model17,Difference = Difference,Prediction = Prediction_Model17)$minimum,
SD_Model18 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model18,Difference = Difference,Prediction = Prediction_Model18)$minimum,
SD_Model19 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model19,Difference = Difference,Prediction = Prediction_Model19)$minimum,
SD_Model20 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model20,Difference = Difference,Prediction = Prediction_Model20)$minimum,
SD_Model21 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model21,Difference = Difference,Prediction = Prediction_Model21)$minimum,
SD_Model22 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model22,Difference = Difference,Prediction = Prediction_Model22)$minimum,
SD_Model23 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model23,Difference = Difference,Prediction = Prediction_Model23)$minimum,
SD_Model24 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model24,Difference = Difference,Prediction = Prediction_Model24)$minimum,
SD_Model25 = optimize(FitCumGaussian,c(0,5),Mean = Mean_Model25,Difference = Difference,Prediction = Prediction_Model25)$minimum)
Dataframe = rbind(Dataframe,Dataframe1 %>%
group_by(ConditionOfInterest,ID,StandardValues) %>%
slice(1))
unique(Dataframe1$StandardValues)
print(Sys.time() - Beginning)
}
distance = 15
#15m distance to target
#0.065m interocular distance assumed
#offsets between 0.05 and 0m shown
#see equations in PDF; this computes the visual angle ("gamma") when there is no offset
VisualAngle_NoOffset = RadiansToDegree(DegreeToRadians(90)- atan(15/(2+0.065/2)) - atan((2-0.065/2)/15))
Offsets = seq(0.025,0.00,-0.00125) #range of offsets
Stereo_Differences = c()
distance = 15
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(15/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Stereo_Differences_ArcSec
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Ratio
distance = 2
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(15/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Ratio
distance
distance = 0.1
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(15/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Ratio
VisualAngle_Offset
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(distance/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Stereo_Differences_ArcSec
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Ratio
#15m distance to target
#0.065m interocular distance assumed
#offsets between 0.05 and 0m shown
#see equations in PDF; this computes the visual angle ("gamma") when there is no offset
VisualAngle_NoOffset = RadiansToDegree(DegreeToRadians(90)- atan(15/(2+0.065/2)) - atan((2-0.065/2)/15))
Offsets = seq(0.025,0.00,-0.00125) #range of offsets
Stereo_Differences = c()
distance = 0.1
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(distance/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Ratio
Stereo_Differences_ArcSec
distance = 2
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(distance/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Stereo_Differences_ArcSec
#15m distance to target
#0.065m interocular distance assumed
#offsets between 0.05 and 0m shown
#see equations in PDF; this computes the visual angle ("gamma") when there is no offset
VisualAngle_NoOffset = RadiansToDegree(DegreeToRadians(90)- atan(15/(2+0.065/2)) - atan((2-0.065/2)/15))
Offsets = seq(0.025,0.00,-0.00125) #range of offsets
Stereo_Differences = c()
distance = 2
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(distance/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Stereo_Differences_ArcSec
#15m distance to target
#0.065m interocular distance assumed
#offsets between 0.05 and 0m shown
#see equations in PDF; this computes the visual angle ("gamma") when there is no offset
VisualAngle_NoOffset = RadiansToDegree(DegreeToRadians(90)- atan(15/(2+0.065/2)) - atan((2-0.065/2)/15))
Offsets = seq(0.025,0.00,-0.00125) #range of offsets
Stereo_Differences = c()
distance = 15
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(distance/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Stereo_Differences_ArcSec
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Ratio
distance = 2
for (Offset in Offsets){
#see equations in PDF; this compute the visual angle ("gamma") when there is an offset
VisualAngle_Offset = DegreeToRadians(180) - atan((2-0.065/2-Offset/2)/distance) - DegreeToRadians(90) - atan(distance/(2+0.065/2+Offset/2))
Stereo_Differences = c(Stereo_Differences,RadiansToDegree(VisualAngle_Offset) - VisualAngle_NoOffset)
}
#translate from degrees into arc seconds
Stereo_Differences_ArcSec = Stereo_Differences*3600
Ratio = round(Offsets[1:20]/Stereo_Differences_ArcSec[1:20],5)
Stereo_Differences_ArcSec
VisualAngle_Offset
