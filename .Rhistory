summary(ANOVA_Mean)
ANOVA_Mean
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
summary(ANOVA_Mean)
Parameters$ConditionOfInterest[Parameters$ConditionOfInterest == 1] = "Condition of Interest"
Parameters$ConditionOfInterest[Parameters$ConditionOfInterest == 0] = "Baseline"
Plot_LMM_Mean = ggplot(Parameters,aes(StandardValues,Mean/StandardValues,color = ID)) +
geom_point(size = 4) +
facet_grid(.~ConditionOfInterest) +
scale_color_manual(name = "",
values = colorRampPalette(c(BlauUB,Yellow, Red))(5)) +
geom_smooth(method='lm', se = FALSE) +
xlab("Standard Values (m/s)") +
ylab("Normalized Mean (m/s)")
Plot_LMM_Mean
Plot_LM_Mean = ggplot(Parameters,aes(StandardValues,Mean/StandardValues)) +
geom_point(size = 4) +
facet_grid(.~ConditionOfInterest) +
geom_smooth(method='lm',color = "black", se = FALSE) +
xlab("Standard Values (m/s)") +
ylab("Normalized Mean (m/s)")
plot_grid(Plot_LM_Mean,Plot_LMM_Mean, labels = "AUTO")
LMM_SD = lmer(SD ~ ConditionOfInterest*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
View(Parameters)
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
require(brms)
require(rstan)
#require(lmerTest)
require(DHARMa)
set.seed(1)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
source("Utilities/PowerFunctions.r")
#optimize for fitting of Bayesian Linear Mixed Models (packages "rstan", "bmrs")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
#set.seed(9121)
ID = paste0("S0",1:5)
ConditionOfInterest = c(0,1)
StandardValues = c(5,6,7,8)
reps = 1:100
PSE_Difference = -0.1
JND_Difference = 0.25
Multiplicator_PSE_Standard = 0
Multiplicator_SD_Standard = 0.15
Type_ResponseFunction = "normal"
SD_ResponseFunction = 0.1
Mean_Variability_Between = 0.2
SD_Variability_Between = 0.2
Psychometric = expand.grid(ID=ID, ConditionOfInterest=ConditionOfInterest, StandardValues=StandardValues, reps = reps)
Psychometric = Psychometric %>%
group_by(ID) %>%#
mutate(PSE_Factor_ID = rnorm(1,1,Mean_Variability_Between), #how much variability is in the means of the psychometric functions between subjects?
SD_Factor_ID = rnorm(1,1,SD_Variability_Between)) #how much variability is in the standard deviations of the psychometric functions between subjects?
Psychometric = Psychometric %>%
mutate(
Mean_Standard = StandardValues+StandardValues*Multiplicator_PSE_Standard,
SD_Standard = StandardValues*Multiplicator_SD_Standard,
Mean = (Mean_Standard + (ConditionOfInterest==1)*Mean_Standard*PSE_Difference),
SD = abs(SD_Standard + (ConditionOfInterest==1)*SD_Standard*JND_Difference))
Psychometric = Psychometric %>%
mutate(
Mean = Mean*PSE_Factor_ID,
SD = SD*SD_Factor_ID)
if (Type_ResponseFunction == "normal"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rnorm(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
} else if (Type_ResponseFunction == "Cauchy"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
#} else if (Type_ResponseFunction == "uniform"){
#
#  Psychometric = Psychometric %>%
#  mutate(
#      staircase_factor = seq(SD_ResponseFunction[1],SD_ResponseFunction[2],(SD_ResponseFunction[2]-SD_ResponseFunc#tion[1]/6)))
} else{
print("distribution not valid")
}
Psychometric = Psychometric %>%
mutate(Presented_TestStimulusStrength = Mean*staircase_factor,
Difference = Presented_TestStimulusStrength - StandardValues)
Psychometric = Psychometric %>%
mutate(
AnswerProbability = pnorm(Presented_TestStimulusStrength,Mean,SD),
##get binary answers ("Test was stronger" yes/no) from probabilities for each trial
Answer = as.numeric(rbernoulli(length(AnswerProbability),AnswerProbability))
)
###prepare for glmer() - needs sum of YES/Total per stimulus strength and condition
Psychometric = Psychometric %>%
filter(abs(staircase_factor-1) < 0.75) %>%
group_by(ID,ConditionOfInterest,StandardValues,Difference) %>%
mutate(Yes = sum(Answer==1),
Total = length(ConditionOfInterest))
###########################################
####Parameter-As-Outcome Model (PAOM)######
###########################################
require(quickpsy)
###Fitting psychometric functions and extracting means and standard deviations
Psychometric$AnswerProbability
PsychometricFunctions = quickpsy(Psychometric,Difference,Answer,grouping = .(ConditionOfInterest,ID,StandardValues), bootstrap = "none")
Parameters = PsychometricFunctions$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters = Parameters2
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
mean(Parameters$Mean[Parameters$ConditionOfInterest == 0])
mean(Parameters$Mean[Parameters$ConditionOfInterest == 1])
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
summary(lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
LMM_SD = lmer(SD ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
summary(lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
summary(ANOVA_Mean)
summary(LMM_Mean)
summary(lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
LMM_SD = lmer(SD ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
summary(ANOVA_SD)
t.test(mean(Parameters$Mean[Parameters$ConditionOfInterest == 0]),mean(Parameters$Mean[Parameters$ConditionOfInterest == 1]))
Parameters$Mean[Parameters$ConditionOfInterest == 0])
t.test(mean(Parameters$Mean[Parameters$ConditionOfInterest == "Baseline"]),mean(Parameters$Mean[Parameters$ConditionOfInterest == "Condition of Interest"]))
Parameters$Mean
Parameters$Mean[Parameters$ConditionOfInterest == "Baseline"]
Parameters$ConditionOfInterest
Parameters$ConditionOfInterest == 0]
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
Parameters
Parameters$ConditionOfInterest == 0
Parameters$Mean[Parameters$ConditionOfInterest == 0]
t.test(mean(Parameters$Mean[Parameters$ConditionOfInterest == 0]),mean(Parameters$Mean[Parameters$ConditionOfInterest == 1]))
Parameters$Mean[Parameters$ConditionOfInterest == 1]
t.test(Parameters$Mean[Parameters$ConditionOfInterest == 0],Parameters$Mean[Parameters$ConditionOfInterest == 1])
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
t.test(Parameters$SD[Parameters$ConditionOfInterest == 0],Parameters$SD[Parameters$ConditionOfInterest == 1])
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
summary(lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
summary(lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
summary(ANOVA_Mean)
update.packages("lme4")
summary(LMM_Mean)
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
require(brms)
require(rstan)
#require(lmerTest)
require(DHARMa)
set.seed(1)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
source("Utilities/PowerFunctions.r")
#optimize for fitting of Bayesian Linear Mixed Models (packages "rstan", "bmrs")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
#set.seed(9121)
ID = paste0("S0",1:20)
ConditionOfInterest = c(0,1)
StandardValues = c(5,6,7,8)
reps = 1:100
PSE_Difference = -0.1
JND_Difference = 0.25
Multiplicator_PSE_Standard = 0
Multiplicator_SD_Standard = 0.15
Type_ResponseFunction = "normal"
SD_ResponseFunction = 0.1
Mean_Variability_Between = 0.2
SD_Variability_Between = 0.2
Psychometric = expand.grid(ID=ID, ConditionOfInterest=ConditionOfInterest, StandardValues=StandardValues, reps = reps)
Psychometric = Psychometric %>%
group_by(ID) %>%#
mutate(PSE_Factor_ID = rnorm(1,1,Mean_Variability_Between), #how much variability is in the means of the psychometric functions between subjects?
SD_Factor_ID = rnorm(1,1,SD_Variability_Between)) #how much variability is in the standard deviations of the psychometric functions between subjects?
Psychometric = Psychometric %>%
mutate(
Mean_Standard = StandardValues+StandardValues*Multiplicator_PSE_Standard,
SD_Standard = StandardValues*Multiplicator_SD_Standard,
Mean = (Mean_Standard + (ConditionOfInterest==1)*Mean_Standard*PSE_Difference),
SD = abs(SD_Standard + (ConditionOfInterest==1)*SD_Standard*JND_Difference))
Psychometric = Psychometric %>%
mutate(
Mean = Mean*PSE_Factor_ID,
SD = SD*SD_Factor_ID)
if (Type_ResponseFunction == "normal"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rnorm(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
} else if (Type_ResponseFunction == "Cauchy"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
#} else if (Type_ResponseFunction == "uniform"){
#
#  Psychometric = Psychometric %>%
#  mutate(
#      staircase_factor = seq(SD_ResponseFunction[1],SD_ResponseFunction[2],(SD_ResponseFunction[2]-SD_ResponseFunc#tion[1]/6)))
} else{
print("distribution not valid")
}
Psychometric = Psychometric %>%
mutate(Presented_TestStimulusStrength = Mean*staircase_factor,
Difference = Presented_TestStimulusStrength - StandardValues)
Psychometric = Psychometric %>%
mutate(
AnswerProbability = pnorm(Presented_TestStimulusStrength,Mean,SD),
##get binary answers ("Test was stronger" yes/no) from probabilities for each trial
Answer = as.numeric(rbernoulli(length(AnswerProbability),AnswerProbability))
)
###prepare for glmer() - needs sum of YES/Total per stimulus strength and condition
Psychometric = Psychometric %>%
filter(abs(staircase_factor-1) < 0.75) %>%
group_by(ID,ConditionOfInterest,StandardValues,Difference) %>%
mutate(Yes = sum(Answer==1),
Total = length(ConditionOfInterest))
###########################################
####Parameter-As-Outcome Model (PAOM)######
###########################################
require(quickpsy)
###Fitting psychometric functions and extracting means and standard deviations
Psychometric$AnswerProbability
PsychometricFunctions = quickpsy(Psychometric,Difference,Answer,grouping = .(ConditionOfInterest,ID,StandardValues), bootstrap = "none")
Parameters = PsychometricFunctions$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters = Parameters2
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
mean(Parameters$Mean[Parameters$ConditionOfInterest == 0])
mean(Parameters$Mean[Parameters$ConditionOfInterest == 1])
t.test(Parameters$Mean[Parameters$ConditionOfInterest == 0],Parameters$Mean[Parameters$ConditionOfInterest == 1])
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
t.test(Parameters$SD[Parameters$ConditionOfInterest == 0],Parameters$SD[Parameters$ConditionOfInterest == 1])
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
summary(lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
summary(lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
summary(lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,
data = Parameters))
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_SD)
LMM_SD = lmer(SD ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
summary(ANOVA_Mean)
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters, type = 3)
aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
anova(ANOVA_Mean)
anova(ANOVA_Mean,type = 3)
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
summary(ANOVA_Mean)
?aov
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
anova(ANOVA_Mean)
?anova
anova(ANOVA_Mean)
summary(ANOVA_Mean)
lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters))
summary(ANOVA_Mean)
ANOVA_Mean = aov(Mean ~ ConditionOfInterest*StandardValues,Parameters)
summary(lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters))
summary(ANOVA_Mean)
?aov
update.packages("stats")
update.packages(stats)
t.test(Parameters$Mean[Parameters$ConditionOfInterest == 0],Parameters$Mean[Parameters$ConditionOfInterest == 1])
ANOVA_Mean = aov(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
ANOVA_SD = aov(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
ANOVA_Mean
summary(ANOVA_Mean)
summary(ANOVA_SD)
summary(ANOVA_Mean)
ANOVA_Mean = lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
ANOVA_SD = lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
anova(ANOVA_Mean)
summary(ANOVA_Mean)
anova(ANOVA_Mean)
summary(ANOVA_Mean)
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
LMM_SD = lmer(SD ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
summary(ANOVA_Mean)
summary(LMM_Mean)
Psychometric
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
require(brms)
require(rstan)
require(DHARMa)
set.seed(1)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
source("Utilities/PowerFunctions.r")
#optimize for fitting of Bayesian Linear Mixed Models (packages "rstan", "bmrs")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
#set.seed(9121)
ID = paste0("S0",1:5)
ConditionOfInterest = c(0,1)
StandardValues = c(5,6,7,8)
reps = 1:100
PSE_Difference = -0.1
JND_Difference = 0.25
Multiplicator_PSE_Standard = 0
Multiplicator_SD_Standard = 0.15
Type_ResponseFunction = "normal"
SD_ResponseFunction = 0.1
Mean_Variability_Between = 0.2
SD_Variability_Between = 0.2
Psychometric = expand.grid(ID=ID, ConditionOfInterest=ConditionOfInterest, StandardValues=StandardValues, reps = reps)
Psychometric = Psychometric %>%
group_by(ID) %>%#
mutate(PSE_Factor_ID = rnorm(1,1,Mean_Variability_Between), #how much variability is in the means of the psychometric functions between subjects?
SD_Factor_ID = rnorm(1,1,SD_Variability_Between)) #how much variability is in the standard deviations of the psychometric functions between subjects?
Psychometric = Psychometric %>%
mutate(
Mean_Standard = StandardValues+StandardValues*Multiplicator_PSE_Standard,
SD_Standard = StandardValues*Multiplicator_SD_Standard,
Mean = (Mean_Standard + (ConditionOfInterest==1)*Mean_Standard*PSE_Difference),
SD = abs(SD_Standard + (ConditionOfInterest==1)*SD_Standard*JND_Difference))
Psychometric = Psychometric %>%
mutate(
Mean = Mean*PSE_Factor_ID,
SD = SD*SD_Factor_ID)
if (Type_ResponseFunction == "normal"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rnorm(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
} else if (Type_ResponseFunction == "Cauchy"){
Psychometric = Psychometric %>%
mutate(
staircase_factor = rcauchy(length(reps),1,SD_ResponseFunction*(1+ConditionOfInterest*JND_Difference)))
#} else if (Type_ResponseFunction == "uniform"){
#
#  Psychometric = Psychometric %>%
#  mutate(
#      staircase_factor = seq(SD_ResponseFunction[1],SD_ResponseFunction[2],(SD_ResponseFunction[2]-SD_ResponseFunc#tion[1]/6)))
} else{
print("distribution not valid")
}
Psychometric = Psychometric %>%
mutate(Presented_TestStimulusStrength = Mean*staircase_factor,
Difference = Presented_TestStimulusStrength - StandardValues)
Psychometric = Psychometric %>%
mutate(
AnswerProbability = pnorm(Presented_TestStimulusStrength,Mean,SD),
##get binary answers ("Test was stronger" yes/no) from probabilities for each trial
Answer = as.numeric(rbernoulli(length(AnswerProbability),AnswerProbability))
)
###prepare for glmer() - needs sum of YES/Total per stimulus strength and condition
Psychometric = Psychometric %>%
filter(abs(staircase_factor-1) < 0.75) %>%
group_by(ID,ConditionOfInterest,StandardValues,Difference) %>%
mutate(Yes = sum(Answer==1),
Total = length(ConditionOfInterest))
###########################################
####Parameter-As-Outcome Model (PAOM)######
###########################################
require(quickpsy)
###Fitting psychometric functions and extracting means and standard deviations
Psychometric$AnswerProbability
PsychometricFunctions = quickpsy(Psychometric,Difference,Answer,grouping = .(ConditionOfInterest,ID,StandardValues), bootstrap = "none")
Parameters = PsychometricFunctions$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters = Parameters2
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
ANOVA_Mean = lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
anova(ANOVA_Mean)
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
LMM_SD = lmer(SD ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
###Fitting psychometric functions and extracting means and standard deviations
PsychometricFunctions = quickpsy(Psychometric,Difference,Answer,grouping = .(ConditionOfInterest,ID,StandardValues), bootstrap = "none")
Parameters = PsychometricFunctions$par
Parameters2 = Parameters %>%
filter(parn == "p1") %>%
select(ID,ConditionOfInterest,Mean=par, StandardValues)
Parameters2$SD = Parameters$par[Parameters$parn == "p2"]
Parameters = Parameters2
###performing ANOVA
###computes pvalues for ANOVA
require(lmerTest)
ANOVA_Mean = lm(Mean ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
summary(ANOVA_Mean)
ANOVA_SD = lm(SD ~ as.factor(ConditionOfInterest)*StandardValues,Parameters)
anova(ANOVA_Mean)
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
LMM_SD = lmer(SD ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_SD)
LMM_Mean = lmer(Mean ~ as.factor(ConditionOfInterest)*StandardValues + (1 | ID),
data = Parameters)
summary(LMM_Mean)
