ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" )) +
facet_grid(id~velH) +
geom_point(data = Data_GLM, aes(Difference,Yes/Total,color = Congruent), alpha = 0.2) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" )) +
facet_grid(id~velH) +
geom_point(data = Data_GLM, aes(Difference,Yes/Total,color = Congruent), alpha = 0.1, size = 0.5) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" )) +
facet_grid(id~velH) +
geom_point(data = Data_GLM, aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.75) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM, aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.75) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM, aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 1) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM, aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM[Data_GLM2$id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08")], aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM[Data_GLM2$id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08"),], aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM2 %>% filter(id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08"),], aes(Difference,Yes/Total,color = Congruent)), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM2 %>% filter(id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08")), aes(Difference,Yes/Total,color = Congruent)), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
Data_GLM2 %>% filter(id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08"))
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = Data_GLM2 %>% filter(id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08")), aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = rbind(Data_GLM2,Data_GLM) %>% filter(id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08")), aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggplot(FittedPsychometricFunctions_WithoutOutliers$curves, aes(x,y,color=Congruent)) +
geom_line(size = 1) +
geom_segment(aes(x = par, y = 0, xend = par, yend = 0.5),
data = FittedPsychometricFunctions_WithoutOutliers$par %>% filter(parn == "p1" ),
size = 1) +
facet_grid(id~velH) +
geom_point(data = rbind(Data_GLM2,Data_GLM) %>% filter(id %in% c("Across All", "s01","s02", "s03", "s04", "s05", "s06", "s08")), aes(Difference,Yes/Total,color = Congruent), alpha = 0.2, size = 0.7) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same Direction","Opposite Directions")) +
scale_x_continuous("Difference between Comparison and Test (m/s)") +
scale_y_continuous("Probability to choose Test",breaks = c(0.2,0.5,0.8)) +
geom_vline(linetype = 2, xintercept = 0, color = "grey") +
geom_hline(linetype = 2, yintercept = 0.5, color = "grey") +
theme(legend.position = "top") +
ggtitle("Full psychometric functions")
ggsave("Poster VOR/All Psychometric Functions.jpg", w = 7, h = 10)
ggplot(Predictions, aes(Difference,Response,color = Motion)) +
geom_line(size = 2) +
scale_color_manual(name = "",
values = c(Red,BlauUB,LightBlauUB),
labels = c("No Motion","Same\nDirection","Opposite\nDirection")) +
xlab("Difference between Comp. and Test (m/s)") +
ylab("Probability Test Faster") +
theme(legend.position = "") +
ggtitle("Incomplete Compensation, Precision Cost") +
geom_hline(yintercept = 0.5, linetype = 2, color = "grey") +
geom_vline(xintercept = 0, linetype = 2, color = "grey") +
annotate("text", x = 2.2, y = 0.6, label = "No Motion\n(steeper slope,\nnot shifted)", color = Red, size = 6) +
annotate("text", x = 1.3, y = 0.2, label = "Opposite Directions\n(shifted right)", color = LightBlauUB, size = 6) +
annotate("text", x = -1, y = 0.8, label = "Same Direction\n(shifted left)", color = BlauUB, size = 6)
Dataframe_pvalues = read.csv(header = T, file = paste0(Where_Am_I(),"/Data/pvalues_Julia.csv"))
Dataframe_pvalues = Dataframe_AICs %>%
mutate(Optimizer = case_when(
label == "JuliaAIC_NeldMeader_AGP0" ~ "Julia: Nelder-Mead, nAGQ 0",
label == "JuliaAIC_bobyqa_AGP0" ~ "Julia: bobyqa, nAGQ 0",
label == "NelderMead_nAGQ0" ~ "R: Nelder-Mead, nAGQ 0",
label == "NelderMead_nAGQ1" ~ "R: Nelder-Mead, nAGQ 1",
label == "Bobyqa_nAGQ0" ~ "R: bobyqa, nAGQ 0",
label == "Bobyqa_nAGQ1" ~ "R: bobyqa, nAGQ 1",
label == "nloptwrap_nAGQ0" ~ "R: nloptwrap, nAGQ 0",
label == "nloptwrap_nAGQ1" ~ "R: nloptwrap, nAGQ 1")
)%>%
group_by(n,reps) %>%
mutate(MedianAIC_n_reps = median(AIC),
Median_pvalue_Accuracy_n_reps = median(Pvalues_Accuracy),
Median_pvalue_Interaction_n_reps = median(Pvalues_Interaction)) %>%
group_by(n,reps,label) %>%
mutate(MedianDuration = median(Duration),
SE_Duration_n_reps_label = SE(Duration),
MedianAIC_Difference = median(AIC)-MedianAIC_n_reps,
Median_Pvalue_Accuracy_Difference = median(Pvalues_Accuracy) - Median_pvalue_Accuracy_n_reps,
Median_Pvalue_Interaction_Difference = median(Pvalues_Interaction) - Median_pvalue_Interaction_n_reps)
ggplot(Dataframe_pvalues,aes(Pvalues_Accuracy, color = Optimizer)) +
geom_density(size = 2) +
coord_cartesian(ylim = c(0,5))
facet_grid(n~reps) +
ggsave("Figures/Duration for each Optimizer.jpg", w = 10, h = 5)
ggplot(Dataframe_pvalues,aes(round(Pvalues_Interaction,2), color = Optimizer, fill = Optimizer)) +
geom_histogram(bins = 20) +
facet_grid(.~Optimizer)
Dataframe_pvalues$Bin_Accuracy = 0
Dataframe_pvalues$Bin_Interaction = 0
for (i in (1:length(Dataframe_pvalues$iteration))){
Bins = seq(0.025,0.975,0.05)
Dataframe_pvalues$Bin_Accuracy[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Accuracy[i]))]+0.025
Dataframe_pvalues$Bin_Interaction[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Interaction[i]))]+0.025
print(i)
}
Dataframe_pvalues = Dataframe_pvalues %>%
group_by(Bin_Accuracy,Optimizer) %>%
mutate(BinCountAccuracy = length(Bin_Accuracy))%>%
group_by(Bin_Interaction,Optimizer) %>%
mutate(BinCountInteraction = length(Bin_Interaction))
ggplot(Dataframe_pvalues %>% filter(Program == "R"),aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
ggplot(Dataframe_pvalues,aes(Bin_Interaction,Optimizer, fill = BinCountInteraction)) +
geom_tile() +
xlab("")
ggplot(Dataframe_pvalues,aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
########################################################################
###########################compare p values#############################
########################################################################
Dataframe_pvalues = read.csv(header = T, file = paste0(Where_Am_I(),"/Data/pvalues_Julia.csv"))
Dataframe_pvalues = Dataframe_AICs %>%
mutate(Optimizer = case_when(
label == "JuliaAIC_NeldMeader_AGP0" ~ "Julia: Nelder-Mead, nAGQ 0",
label == "JuliaAIC_bobyqa_AGP0" ~ "Julia: bobyqa, nAGQ 0",
label == "NelderMead_nAGQ0" ~ "R: Nelder-Mead, nAGQ 0",
label == "NelderMead_nAGQ1" ~ "R: Nelder-Mead, nAGQ 1",
label == "Bobyqa_nAGQ0" ~ "R: bobyqa, nAGQ 0",
label == "Bobyqa_nAGQ1" ~ "R: bobyqa, nAGQ 1",
label == "nloptwrap_nAGQ0" ~ "R: nloptwrap, nAGQ 0",
label == "nloptwrap_nAGQ1" ~ "R: nloptwrap, nAGQ 1")
)%>%
group_by(n,reps) %>%
mutate(MedianAIC_n_reps = median(AIC),
Median_pvalue_Accuracy_n_reps = median(Pvalues_Accuracy),
Median_pvalue_Interaction_n_reps = median(Pvalues_Interaction)) %>%
group_by(n,reps,label) %>%
mutate(MedianDuration = median(Duration),
SE_Duration_n_reps_label = SE(Duration),
MedianAIC_Difference = median(AIC)-MedianAIC_n_reps,
Median_Pvalue_Accuracy_Difference = median(Pvalues_Accuracy) - Median_pvalue_Accuracy_n_reps,
Median_Pvalue_Interaction_Difference = median(Pvalues_Interaction) - Median_pvalue_Interaction_n_reps)
ggplot(Dataframe_pvalues,aes(Pvalues_Accuracy, color = Optimizer)) +
geom_density(size = 2) +
coord_cartesian(ylim = c(0,5))
facet_grid(n~reps) +
ggsave("Figures/Duration for each Optimizer.jpg", w = 10, h = 5)
ggplot(Dataframe_pvalues,aes(round(Pvalues_Interaction,2), color = Optimizer, fill = Optimizer)) +
geom_histogram(bins = 20) +
facet_grid(.~Optimizer)
Dataframe_pvalues$Bin_Accuracy = 0
Dataframe_pvalues$Bin_Interaction = 0
for (i in (1:length(Dataframe_pvalues$iteration))){
Bins = seq(0.025,0.975,0.05)
Dataframe_pvalues$Bin_Accuracy[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Accuracy[i]))]+0.025
Dataframe_pvalues$Bin_Interaction[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Interaction[i]))]+0.025
print(i)
}
Dataframe_pvalues = Dataframe_pvalues %>%
group_by(Bin_Accuracy,Optimizer) %>%
mutate(BinCountAccuracy = length(Bin_Accuracy))%>%
group_by(Bin_Interaction,Optimizer) %>%
mutate(BinCountInteraction = length(Bin_Interaction))
ggplot(Dataframe_pvalues,aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
########################################################################
###########################compare p values#############################
########################################################################
Dataframe_pvalues = read.csv(header = T, file = paste0(Where_Am_I(),"/Data/Pvalues_Julia.csv"))
Dataframe_pvalues = Dataframe_AICs %>%
mutate(Optimizer = case_when(
label == "JuliaAIC_NeldMeader_AGP0" ~ "Julia: Nelder-Mead, nAGQ 0",
label == "JuliaAIC_bobyqa_AGP0" ~ "Julia: bobyqa, nAGQ 0",
label == "NelderMead_nAGQ0" ~ "R: Nelder-Mead, nAGQ 0",
label == "NelderMead_nAGQ1" ~ "R: Nelder-Mead, nAGQ 1",
label == "Bobyqa_nAGQ0" ~ "R: bobyqa, nAGQ 0",
label == "Bobyqa_nAGQ1" ~ "R: bobyqa, nAGQ 1",
label == "nloptwrap_nAGQ0" ~ "R: nloptwrap, nAGQ 0",
label == "nloptwrap_nAGQ1" ~ "R: nloptwrap, nAGQ 1")
)%>%
group_by(n,reps) %>%
mutate(MedianAIC_n_reps = median(AIC),
Median_pvalue_Accuracy_n_reps = median(Pvalues_Accuracy),
Median_pvalue_Interaction_n_reps = median(Pvalues_Interaction)) %>%
group_by(n,reps,label) %>%
mutate(MedianDuration = median(Duration),
SE_Duration_n_reps_label = SE(Duration),
MedianAIC_Difference = median(AIC)-MedianAIC_n_reps,
Median_Pvalue_Accuracy_Difference = median(Pvalues_Accuracy) - Median_pvalue_Accuracy_n_reps,
Median_Pvalue_Interaction_Difference = median(Pvalues_Interaction) - Median_pvalue_Interaction_n_reps)
ggplot(Dataframe_pvalues,aes(Pvalues_Accuracy, color = Optimizer)) +
geom_density(size = 2) +
coord_cartesian(ylim = c(0,5))
facet_grid(n~reps) +
ggsave("Figures/Duration for each Optimizer.jpg", w = 10, h = 5)
ggplot(Dataframe_pvalues,aes(Pvalues_Accuracy, color = Optimizer)) +
geom_density(size = 2) +
coord_cartesian(ylim = c(0,5)) +
facet_grid(n~reps)
ggplot(Dataframe_pvalues,aes(round(Pvalues_Interaction,2), color = Optimizer, fill = Optimizer)) +
geom_histogram(bins = 20) +
facet_grid(.~Optimizer)
Dataframe_pvalues$Bin_Accuracy = 0
Dataframe_pvalues$Bin_Interaction = 0
for (i in (1:length(Dataframe_pvalues$iteration))){
Bins = seq(0.025,0.975,0.05)
Dataframe_pvalues$Bin_Accuracy[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Accuracy[i]))]+0.025
Dataframe_pvalues$Bin_Interaction[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Interaction[i]))]+0.025
print(i)
}
Dataframe_pvalues = Dataframe_pvalues %>%
group_by(Bin_Accuracy,Optimizer) %>%
mutate(BinCountAccuracy = length(Bin_Accuracy))%>%
group_by(Bin_Interaction,Optimizer) %>%
mutate(BinCountInteraction = length(Bin_Interaction))
ggplot(Dataframe_pvalues,aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
###Pull the whole repository
require(dplyr)
require(tidyverse)
require(lme4)
require(ggplot2)
require(cowplot)
theme_set(theme_cowplot())
require(quickpsy)
require(brms)
require(rstan)
#require(lmerTest)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)}
setwd(Where_Am_I())
source("Utilities/parabolic.r")
source("Utilities/functions.r")
source("Utilities/colourschemes.r")
source("Utilities/PowerFunctions.r")
#optimize for fitting of Bayesian Linear Mixed Models (packages "rstan", "bmrs")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
########################################################################
###########################compare p values#############################
########################################################################
Dataframe_pvalues = read.csv(header = T, file = paste0(Where_Am_I(),"/Data/Pvalues_Julia.csv"))
Dataframe_pvalues = Dataframe_AICs %>%
mutate(Optimizer = case_when(
label == "JuliaAIC_NeldMeader_AGP0" ~ "Julia: Nelder-Mead, nAGQ 0",
label == "JuliaAIC_bobyqa_AGP0" ~ "Julia: bobyqa, nAGQ 0",
label == "NelderMead_nAGQ0" ~ "R: Nelder-Mead, nAGQ 0",
label == "NelderMead_nAGQ1" ~ "R: Nelder-Mead, nAGQ 1",
label == "Bobyqa_nAGQ0" ~ "R: bobyqa, nAGQ 0",
label == "Bobyqa_nAGQ1" ~ "R: bobyqa, nAGQ 1",
label == "nloptwrap_nAGQ0" ~ "R: nloptwrap, nAGQ 0",
label == "nloptwrap_nAGQ1" ~ "R: nloptwrap, nAGQ 1")
)%>%
group_by(n,reps) %>%
mutate(MedianAIC_n_reps = median(AIC),
Median_pvalue_Accuracy_n_reps = median(Pvalues_Accuracy),
Median_pvalue_Interaction_n_reps = median(Pvalues_Interaction)) %>%
group_by(n,reps,label) %>%
mutate(MedianDuration = median(Duration),
SE_Duration_n_reps_label = SE(Duration),
MedianAIC_Difference = median(AIC)-MedianAIC_n_reps,
Median_Pvalue_Accuracy_Difference = median(Pvalues_Accuracy) - Median_pvalue_Accuracy_n_reps,
Median_Pvalue_Interaction_Difference = median(Pvalues_Interaction) - Median_pvalue_Interaction_n_reps)
ggplot(Dataframe_pvalues,aes(Pvalues_Accuracy, color = Optimizer)) +
geom_density(size = 2) +
coord_cartesian(ylim = c(0,5)) +
facet_grid(n~reps)
ggsave("Figures/Duration for each Optimizer.jpg", w = 10, h = 5)
ggplot(Dataframe_pvalues,aes(round(Pvalues_Interaction,2), color = Optimizer, fill = Optimizer)) +
geom_histogram(bins = 20) +
facet_grid(.~Optimizer)
Dataframe_pvalues$Bin_Accuracy = 0
Dataframe_pvalues$Bin_Interaction = 0
for (i in (1:length(Dataframe_pvalues$iteration))){
Bins = seq(0.025,0.975,0.05)
Dataframe_pvalues$Bin_Accuracy[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Accuracy[i]))]+0.025
Dataframe_pvalues$Bin_Interaction[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Interaction[i]))]+0.025
print(i)
}
Dataframe_pvalues = Dataframe_pvalues %>%
group_by(Bin_Accuracy,Optimizer) %>%
mutate(BinCountAccuracy = length(Bin_Accuracy))%>%
group_by(Bin_Interaction,Optimizer) %>%
mutate(BinCountInteraction = length(Bin_Interaction))
ggplot(Dataframe_pvalues,aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
Dataframe_pvalues
Where_Am_I()
paste0(Where_Am_I(),"/Data/Pvalues_Julia.csv")
read.csv(header = T, file = paste0(Where_Am_I(),"/Data/Pvalues_Julia.csv"))
########################################################################
###########################compare p values#############################
########################################################################
Dataframe_pvalues = read.csv(header = T, file = paste0(Where_Am_I(),"/Data/Pvalues_Julia.csv"))
Dataframe_pvalues
Dataframe_pvalues = Dataframe_pvalues %>%
mutate(Optimizer = case_when(
label == "JuliaAIC_NeldMeader_AGP0" ~ "Julia: Nelder-Mead, nAGQ 0",
label == "JuliaAIC_bobyqa_AGP0" ~ "Julia: bobyqa, nAGQ 0",
label == "NelderMead_nAGQ0" ~ "R: Nelder-Mead, nAGQ 0",
label == "NelderMead_nAGQ1" ~ "R: Nelder-Mead, nAGQ 1",
label == "Bobyqa_nAGQ0" ~ "R: bobyqa, nAGQ 0",
label == "Bobyqa_nAGQ1" ~ "R: bobyqa, nAGQ 1",
label == "nloptwrap_nAGQ0" ~ "R: nloptwrap, nAGQ 0",
label == "nloptwrap_nAGQ1" ~ "R: nloptwrap, nAGQ 1")
)%>%
group_by(n,reps) %>%
mutate(MedianAIC_n_reps = median(AIC),
Median_pvalue_Accuracy_n_reps = median(Pvalues_Accuracy),
Median_pvalue_Interaction_n_reps = median(Pvalues_Interaction)) %>%
group_by(n,reps,label) %>%
mutate(MedianDuration = median(Duration),
SE_Duration_n_reps_label = SE(Duration),
MedianAIC_Difference = median(AIC)-MedianAIC_n_reps,
Median_Pvalue_Accuracy_Difference = median(Pvalues_Accuracy) - Median_pvalue_Accuracy_n_reps,
Median_Pvalue_Interaction_Difference = median(Pvalues_Interaction) - Median_pvalue_Interaction_n_reps)
ggplot(Dataframe_pvalues,aes(Pvalues_Accuracy, color = Optimizer)) +
geom_density(size = 2) +
coord_cartesian(ylim = c(0,5)) +
facet_grid(n~reps)
ggsave("Figures/Duration for each Optimizer.jpg", w = 10, h = 5)
ggplot(Dataframe_pvalues,aes(round(Pvalues_Interaction,2), color = Optimizer, fill = Optimizer)) +
geom_histogram(bins = 20) +
facet_grid(.~Optimizer)
Dataframe_pvalues$Bin_Accuracy = 0
Dataframe_pvalues$Bin_Interaction = 0
for (i in (1:length(Dataframe_pvalues$iteration))){
Bins = seq(0.025,0.975,0.05)
Dataframe_pvalues$Bin_Accuracy[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Accuracy[i]))]+0.025
Dataframe_pvalues$Bin_Interaction[i] = Bins[which.min(abs(Bins-Dataframe_pvalues$Pvalues_Interaction[i]))]+0.025
print(i)
}
Dataframe_pvalues = Dataframe_pvalues %>%
group_by(Bin_Accuracy,Optimizer) %>%
mutate(BinCountAccuracy = length(Bin_Accuracy))%>%
group_by(Bin_Interaction,Optimizer) %>%
mutate(BinCountInteraction = length(Bin_Interaction))
ggplot(Dataframe_pvalues,aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
ggplot(Dataframe_pvalues,aes(Bin_Accuracy,Optimizer, fill = BinCountAccuracy)) +
geom_tile() +
xlab("")
ggplot(Dataframe_pvalues,aes(Bin_Interaction,Optimizer, fill = BinCountInteraction)) +
geom_tile() +
xlab("")
